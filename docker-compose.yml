services:
  meeting-1:
    build:
      context: ./backend-ms
      dockerfile: apps/meeting/Dockerfile
      target: development
    command: npm run start:dev meeting
    container_name: meeting-1
    env_file:
      - ./backend-ms/apps/meeting/.env
    depends_on:
      - mongodb
      - room-1
      - room-2
      - auth-1
      - auth-2
      - rabbitmq
      - kafka
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3001:3000
    networks:
      - backend-network
  meeting-2:
    build:
      context: ./backend-ms
      dockerfile: apps/meeting/Dockerfile
      target: development
    command: npm run start:dev meeting
    container_name: meeting-2
    env_file:
      - ./backend-ms/apps/meeting/.env
    depends_on:
      - mongodb
      - room-1
      - room-2
      - auth-1
      - auth-2
      - rabbitmq
      - kafka
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3002:3000
    networks:
      - backend-network
  room-1:
    build:
      context: ./backend-ms
      dockerfile: apps/room/Dockerfile
      target: development
    command: npm run start:dev room
    container_name: room-1
    env_file:
      - ./backend-ms/apps/room/.env
    depends_on:
      - mongodb
      - rabbitmq
      - auth-1
      - auth-2
      - kafka
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 2001:2000
    networks:
      - backend-network
  room-2:
    build:
      context: ./backend-ms
      dockerfile: apps/room/Dockerfile
      target: development
    command: npm run start:dev room
    container_name: room-2
    env_file:
      - ./backend-ms/apps/room/.env
    depends_on:
      - mongodb
      - rabbitmq
      - auth-1
      - auth-2
      - kafka
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 2002:2000
    networks:
      - backend-network
  auth-1:
    build:
      context: ./backend-ms
      dockerfile: apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    container_name: auth-1
    env_file:
      - ./backend-ms/apps/auth/.env
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 4001:4000
    networks:
      - backend-network

  auth-2:
    build:
      context: ./backend-ms
      dockerfile: apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    container_name: auth-2
    env_file:
      - ./backend-ms/apps/auth/.env
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 4002:4000
    networks:
      - backend-network
  notification-1:
    build:
      context: ./backend-ms
      dockerfile: apps/notification/Dockerfile
      target: development
    command: npm run start:dev notification
    container_name: notification-1
    env_file:
      - ./backend-ms/apps/notification/.env
    depends_on:
      - kafka
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 1001:1000
    networks:
      - backend-network

  notification-2:
    build:
      context: ./backend-ms
      dockerfile: apps/notification/Dockerfile
      target: development
    command: npm run start:dev notification
    container_name: notification-2
    env_file:
      - ./backend-ms/apps/notification/.env
    depends_on:
      - kafka
    volumes:
      - ./backend-ms:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 1002:1000
    networks:
      - backend-network
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672     # RabbitMQ Port
      - 15672:15672   # RabbitMQ Dashboard Port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend-network
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=admin
    command: ["mongod", "--auth"]  # Active l'authentification
    ports:
      - 27017:27017
    volumes:
        - ./data/db/mongo:/data/db
    networks:
      - backend-network
  main-app:
    build:
      context: ./ng-mf
      dockerfile: apps/main-app/Dockerfile
    container_name: main-app
    ports:
      - "4200:4200"
    restart: always
    networks:
      - frontend-network
    develop:
      watch:
      - action: sync
        path: .
        target: ./ng-mf
  auth:
    build:
      context: ./ng-mf
      dockerfile: apps/auth/Dockerfile
    container_name: auth
    ports:
      - "4201:4201"
    restart: always
    networks:
      - frontend-network
    develop:
      watch:
      - action: sync
        path: .
        target: ./ng-mf
  room:
    build:
      context: ./ng-mf
      dockerfile: apps/room/Dockerfile
    container_name: room
    ports:
      - "4202:4202"
    restart: always
    networks:
      - frontend-network
    develop:
      watch:
      - action: sync
        path: .
        target: ./ng-mf
  meeting:
    build:
      context: ./ng-mf
      dockerfile: apps/meeting/Dockerfile
    container_name: meeting
    ports:
      - "4204:4204"
    restart: always
    networks:
      - frontend-network
    develop:
      watch:
      - action: sync
        path: .
        target: ./ng-mf
  user:
    build:
      context: ./ng-mf
      dockerfile: apps/user/Dockerfile
    container_name: user
    ports:
      - "4205:4205"
    restart: always
    networks:
      - frontend-network
    develop:
      watch:
      - action: sync        
        path: .
        target: ./ng-mf
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - 8080:8080  # Backend
    depends_on:
      - meeting-1
      - meeting-2
      - room-1
      - room-2
      - auth-1
      - auth-2
      - mongodb
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend-network
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    networks:
      - backend-network
  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      - kafka
    ports:
      - 8081:8081
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - backend-network
networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge